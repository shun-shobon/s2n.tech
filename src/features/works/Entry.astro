---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import { getDataEntryById } from "astro:content";
import { Icon } from "astro-icon/components";

import { slugToYearMonth } from "../utils";

interface Props {
	id?: string;
	entry: CollectionEntry<"works">;
}

const { id, entry } = Astro.props;

const date = slugToYearMonth(entry.slug);

const technologies = await Promise.all(
	entry.data.technologies.map((technology) =>
		getDataEntryById("technologies", technology.id),
	),
);

const { Content } = await entry.render();

const listItem = "after:content-[','] after:last:hidden";
---

<dialog
	id={id}
	popover
	class="work-card-modal m-auto max-h-[min(100%,100dvh-(--spacing(8)))] w-[min(100%,100dvw-(--spacing(8)))] max-w-prose overscroll-contain rounded-md border border-zinc-700/80 bg-zinc-800/80 text-white shadow-lg shadow-zinc-800 backdrop-blur backdrop:bg-black/60"
	aria-labelledby={`work-entry-title-${entry.slug}`}
>
	<div class="grid gap-4 p-4">
		<form method="dialog" class="ml-auto">
			<button type="submit" class="rounded-md border border-zinc-700">
				<Icon
					name="material-symbols-light:close"
					aria-label="閉じる"
					class="text-4xl"
				/>
			</button>
		</form>
		<article>
			<header class="mb-4 grid gap-4">
				<Image
					src={entry.data.image}
					widths={[300, 600, 1200, entry.data.image.width]}
					sizes={`600px`}
					alt=""
					class="h-auto w-full"
				/>
				<div>
					<h1 id={`work-entry-title-${entry.slug}`} class="text-3xl">
						{entry.data.title}
					</h1>
					<time
						datetime={date.toString({ calendarName: "never" })}
						class="block"
					>
						{date.toLocaleString("ja-JP")}
					</time>
				</div>
				<table
					class="border-y-2 border-y-white [&_:is(th,td)]:border-b [&_:is(th,td)]:border-b-white [&_:is(th,td)]:p-1 [&_th]:text-center"
				>
					<tr>
						<th>Technologies</th>
						<td>
							<ul class="flex flex-wrap gap-2">
								{
									technologies.map((technology) => (
										<li class={listItem}>{technology.data.name}</li>
									))
								}
							</ul>
						</td>
					</tr>
					<tr>
						<th>Platform</th>
						<td>
							<ul class="flex flex-wrap gap-2">
								{
									entry.data.platforms.map((platform) => (
										<li class={listItem}>{platform}</li>
									))
								}
							</ul>
						</td>
					</tr>
					{
						entry.data.links && (
							<tr>
								<th>Links</th>
								<td>
									<ul class="flex flex-wrap gap-2">
										{entry.data.links.map((link) =>
											// prettier-ignore
											<li class={listItem}><a href={link.url} target="_blank" class="underline transition-colors duration-200 ease-in-out hover:text-sky-300">{link.name}</a></li>,
										)}
									</ul>
								</td>
							</tr>
						)
					}
				</table>
			</header>
			<Content />
		</article>
	</div>
</dialog>
