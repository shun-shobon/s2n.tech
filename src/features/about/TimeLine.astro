---
import { getCollection } from "astro:content";
import { Icon } from "astro-icon/components";

import Heading from "./Heading.astro";

const timeline = await getCollection("timeline");
timeline.sort((a, b) => {
	const aDate = new Date(a.data.startedAt);
	const bDate = new Date(b.data.startedAt);
	return bDate.getTime() - aDate.getTime();
});

const intl = new Intl.DateTimeFormat("ja-JP", {
	year: "numeric",
	month: "numeric",
});
---

<section class="mx-auto flex flex-col items-center gap-8 px-4 sm:px-8">
	<Heading>TimeLine<Fragment slot="ja">これまでの経歴</Fragment></Heading>
	<div class="about-timeline grid w-full max-w-4xl gap-2 sm:gap-4">
		<div
			class="about-timeline-line-top flex items-center gap-1"
			role="presentation"
		>
			<Icon name="6star" class="size-2" />
			<span class="grow border-t border-dashed"></span>
			<Icon name="6star" class="size-2" />
		</div>

		<div
			class="grid w-full grid-cols-1 sm:grid-cols-[1fr_calc(var(--spacing)*3)_1fr]"
		>
			{
				timeline.map((item) => (
					<div class="about-timeline-item group flex gap-2 sm:col-span-2 sm:odd:flex-row-reverse sm:even:col-start-2">
						<div
							role="presentation"
							class="flex w-3 shrink-0 flex-col items-center gap-1.5 pb-1.5"
						>
							<Icon name="4star" class="size-3 shrink-0 rotate-45" />
							<span class="h-full grow border-l group-last:hidden" />
						</div>

						<article class="grid grow pb-4 group-last:pb-0">
							<div class="text-xs leading-none sm:text-sm sm:group-odd:text-right">
								<time datetime={item.data.startedAt}>
									{intl.format(new Date(item.data.startedAt))}
								</time>
								{item.data.endedAt && (
									<>
										<span>-</span>
										{item.data.endedAt === "present" ? (
											<span>現在</span>
										) : (
											<time datetime={item.data.endedAt}>
												{intl.format(new Date(item.data.endedAt))}
											</time>
										)}
									</>
								)}
							</div>
							<h3 class="text-justify text-base font-bold sm:text-lg sm:group-odd:text-right">
								{item.data.title}
							</h3>
							{item.data.description && (
								<p class="min-w-0 text-justify text-sm sm:text-base">
									{item.data.description}
								</p>
							)}
						</article>
					</div>
				))
			}
		</div>

		<div
			class="about-timeline-line-bottom flex items-center gap-1"
			role="presentation"
		>
			<Icon name="6star" class="size-2" />
			<span class="grow border-t border-dashed"></span>
			<Icon name="6star" class="size-2" />
		</div>
	</div>
</section>
<script>
	import { gsap } from "gsap";
	import { ScrollTrigger } from "gsap/ScrollTrigger";

	gsap.registerPlugin(ScrollTrigger);

	const timeline = document.querySelector(".about-timeline")!;
	const lineTop = timeline.querySelector(".about-timeline-line-top");
	const lineBottom = timeline.querySelector(".about-timeline-line-bottom");
	const items = timeline.querySelectorAll(".about-timeline-item");

	gsap.from(lineTop, {
		scrollTrigger: {
			trigger: timeline,
			start: "top bottom-=20%",
			end: "top top",
		},
		opacity: 0,
		translateX: "-5%",
		duration: 0.8,
		ease: "power3.out",
		delay: 0.5,
	});
	gsap.from(lineBottom, {
		scrollTrigger: {
			trigger: timeline,
			start: "top bottom-=20%",
			end: "top top",
		},
		opacity: 0,
		translateX: "5%",
		duration: 0.8,
		ease: "power3.out",
		delay: 0.5,
	});

	gsap.from(items, {
		scrollTrigger: {
			trigger: timeline,
			start: "top bottom-=20%",
			end: "top top",
		},
		opacity: 0,
		y: "10%",
		duration: 0.8,
		ease: "power3.out",
		delay: 0.5,
		stagger: 0.1,
	});
</script>
